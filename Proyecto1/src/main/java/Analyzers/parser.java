
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import Logic.*;
import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\007\002" +
    "\000\002\006\010\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\004\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\040\001\002\000\004\006\011\001\002" +
    "\000\006\005\ufffd\006\ufffd\001\002\000\006\005\037\006" +
    "\011\001\002\000\004\007\012\001\002\000\004\010\013" +
    "\001\002\000\022\012\022\013\015\014\024\015\021\016" +
    "\023\017\016\020\017\021\020\001\002\000\004\011\ufffc" +
    "\001\002\000\024\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\001\002\000\022" +
    "\012\022\013\015\014\024\015\021\016\023\017\016\020" +
    "\017\021\020\001\002\000\022\012\022\013\015\014\024" +
    "\015\021\016\023\017\016\020\017\021\020\001\002\000" +
    "\022\012\022\013\015\014\024\015\021\016\023\017\016" +
    "\020\017\021\020\001\002\000\022\012\022\013\015\014" +
    "\024\015\021\016\023\017\016\020\017\021\020\001\002" +
    "\000\024\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\001\002\000\022\012\022" +
    "\013\015\014\024\015\021\016\023\017\016\020\017\021" +
    "\020\001\002\000\024\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\001\002\000" +
    "\022\012\022\013\015\014\024\015\021\016\023\017\016" +
    "\020\017\021\020\001\002\000\024\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\001\002\000\024\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\001\002\000\022" +
    "\012\022\013\015\014\024\015\021\016\023\017\016\020" +
    "\017\021\020\001\002\000\024\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\001" +
    "\002\000\024\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\001\002\000\024\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\001\002\000\004\011\035\001\002\000" +
    "\006\005\ufffb\006\ufffb\001\002\000\006\005\ufffe\006\ufffe" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\007\006\006\001\001" +
    "\000\002\001\001\000\004\006\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\013\001\001\000\004" +
    "\007\033\001\001\000\002\001\001\000\004\005\032\001" +
    "\001\000\004\005\031\001\001\000\004\005\027\001\001" +
    "\000\004\005\026\001\001\000\002\001\001\000\004\005" +
    "\024\001\001\000\002\001\001\000\004\005\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static int contID=1;
    public static int idstatus=1;
    public static Node raiz;

    public static void graficarArbol(Node act, String nombre){
        
        FileWriter fichero = null;
        PrintWriter pw = null;
        try{
            fichero = new FileWriter("src/main/java/Arboles/"+nombre+".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=circle]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        }catch(Exception e){
            Gui.MainWindow.txtconsole.setText(e.toString());
        }finally{
            try{
                if (fichero!=null){
                    fichero.close();
                }
            }catch(Exception ex){
                Gui.MainWindow.txtconsole.setText(ex.toString());
            }
        }

        try{
            //direccion del compilador de Graphviz
            String grapPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //direccion del .dot
            String filePath = "src/main/java/Arboles/"+nombre+".dot";
            //direccion de la imagen a crear
            String imgPath = "src/main/java/Arboles/"+nombre+".jpg";
            //conversion
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = grapPath;
            cmd[1] = tParam;
            cmd[2] = filePath;
            cmd[3] = tOParam;
            cmd[4] = imgPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);
        }catch(Exception e){
            Gui.MainWindow.txtconsole.setText(e.toString());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= STATEMENT 
            {
              String RESULT =null;
		
                
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATEMENT ::= obracke FIRSTP cbracke 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FIRSTP ::= FIRSTP ER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIRSTP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FIRSTP ::= ER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIRSTP",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            String first = idstatus+",";
            String last = idstatus+",";
            String firs;
            String las;
            Node newfinal = new Node(null,null,"#",parser.contID,parser.idstatus,"N",first,last);
            parser.contID++;
            if(val.getVoidable()=="A"){
                firs = val.getFirst()+last;
            }else{
                firs = val.getFirst();
            }
                las = newfinal.getLast();
            Node newroot = new Node(val,newfinal,".",parser.contID,0,"N",firs,las);
            parser.raiz = newroot;
            graficarArbol(newroot, a);
            idstatus=1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ER ::= id sub greather NOTATIONS NT$0 semicolon 
            {
              Node RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NOTATIONS ::= or NOTATIONS NOTATIONS 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String voi;
            if(a.getVoidable()=="A" || b.getVoidable()=="A"){
                voi="A";
            }else{
                voi="N";
            }
            String first = a.getFirst() + b.getFirst();
            String last = a.getLast() + b.getLast();
            
            Node newor = new Node(a,b,"|",parser.contID,0,voi,first,last);
            parser.contID++;
            RESULT = newor;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATIONS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NOTATIONS ::= concat NOTATIONS NOTATIONS 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String voi;
            String first;
            String last;
            if(a.getVoidable()=="A" && b.getVoidable()=="A"){
                voi="A";
            }else{
                voi="N";
            }
            if(a.getVoidable()=="A"){
                first=a.getFirst()+b.getFirst();
            }else{
                first=a.getFirst();
            }
            if(b.getVoidable()=="A"){
                last=a.getLast()+b.getLast();
            }else{
                last=b.getLast();
            }
            
            Node newconcat = new Node(a,b,".",parser.contID,0,voi,first,last);
            parser.contID++;
            RESULT = newconcat;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATIONS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NOTATIONS ::= sum NOTATIONS 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=a.getFirst();
            String last=a.getLast();

            Node newsum = new Node(null,a,"+",parser.contID,0,"N",first,last);
            parser.contID++;
            RESULT = newsum;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATIONS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOTATIONS ::= mult NOTATIONS 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=a.getFirst();
            String last=a.getLast();

            Node newmult = new Node(null,a,"*",parser.contID,0,"A",first,last);
            parser.contID++;
            RESULT = newmult;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATIONS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOTATIONS ::= question NOTATIONS 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=a.getFirst();
            String last=a.getLast();

            Node newquestion = new Node(null,a,"?",parser.contID,0,"A",first,last);
            parser.contID++;
            RESULT = newquestion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATIONS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NOTATIONS ::= id_setER 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=idstatus+",";
            String last=idstatus+",";

            Node newidseter = new Node(null,null,val.replace("{","").replace("}",""),parser.contID,parser.idstatus,"N",first,last);
            parser.idstatus++;
            parser.contID++;
            RESULT = newidseter;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATIONS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOTATIONS ::= specialSetER 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=idstatus+",";
            String last=idstatus+",";

            Node newspcset = new Node(null,null,val,parser.contID,parser.idstatus,"N",first,last);
            parser.idstatus++;
            parser.contID++;
            RESULT = newspcset;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATIONS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NOTATIONS ::= setER 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=idstatus+",";
            String last=idstatus+",";

            Node newseter = new Node(null,null,val,parser.contID,parser.idstatus,"N",first,last);
            parser.idstatus++;
            parser.contID++;
            RESULT = newseter;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATIONS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
