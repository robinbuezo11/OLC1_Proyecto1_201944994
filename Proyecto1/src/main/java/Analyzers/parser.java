
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import Logic.*;
import Gui.*;
import java.util.TreeMap;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\006\004\000\002\006\003\000\002\007\004\000" +
    "\002\007\003\000\002\005\011\000\002\011\007\000\002" +
    "\010\006\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\004\004\005\001\002\000\004\002\062\001" +
    "\002\000\006\005\012\007\014\001\002\000\006\007\ufffa" +
    "\025\ufffa\001\002\000\006\007\014\025\ufffe\001\002\000" +
    "\004\025\051\001\002\000\006\005\ufffc\007\ufffc\001\002" +
    "\000\004\006\043\001\002\000\006\005\012\007\014\001" +
    "\002\000\004\014\015\001\002\000\004\015\016\001\002" +
    "\000\022\010\022\011\021\013\027\017\026\020\025\021" +
    "\017\022\024\023\023\001\002\000\022\010\022\011\021" +
    "\013\027\017\026\020\025\021\017\022\024\023\023\001" +
    "\002\000\004\024\036\001\002\000\024\010\uffef\011\uffef" +
    "\013\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\001\002\000\024\010\uffee\011\uffee\013\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\001\002\000" +
    "\022\010\022\011\021\013\027\017\026\020\025\021\017" +
    "\022\024\023\023\001\002\000\022\010\022\011\021\013" +
    "\027\017\026\020\025\021\017\022\024\023\023\001\002" +
    "\000\022\010\022\011\021\013\027\017\026\020\025\021" +
    "\017\022\024\023\023\001\002\000\022\010\022\011\021" +
    "\013\027\017\026\020\025\021\017\022\024\023\023\001" +
    "\002\000\024\010\uffed\011\uffed\013\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\001\002\000\022\010" +
    "\022\011\021\013\027\017\026\020\025\021\017\022\024" +
    "\023\023\001\002\000\024\010\ufff3\011\ufff3\013\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\001\002" +
    "\000\024\010\ufff2\011\ufff2\013\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\001\002\000\022\010\022" +
    "\011\021\013\027\017\026\020\025\021\017\022\024\023" +
    "\023\001\002\000\024\010\ufff4\011\ufff4\013\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\001\002\000" +
    "\024\010\ufff0\011\ufff0\013\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\001\002\000\006\007\ufff6\025" +
    "\ufff6\001\002\000\024\010\ufff1\011\ufff1\013\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\001\002\000" +
    "\006\007\014\025\uffff\001\002\000\006\005\ufffd\007\ufffd" +
    "\001\002\000\006\007\ufffb\025\ufffb\001\002\000\004\007" +
    "\044\001\002\000\004\014\045\001\002\000\004\015\046" +
    "\001\002\000\004\016\047\001\002\000\004\024\050\001" +
    "\002\000\006\005\ufff7\007\ufff7\001\002\000\004\007\054" +
    "\001\002\000\006\007\ufff8\026\ufff8\001\002\000\006\007" +
    "\054\026\061\001\002\000\004\006\055\001\002\000\004" +
    "\012\056\001\002\000\004\024\057\001\002\000\006\007" +
    "\ufff5\026\ufff5\001\002\000\006\007\ufff9\026\ufff9\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\007\004\012\005\010\006\006\011\005\001\001" +
    "\000\002\001\001\000\004\011\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\040" +
    "\006\037\011\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\017\001\001\000\004\012\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\034\001\001\000\004\012\032\001\001\000\004" +
    "\012\031\001\001\000\004\012\027\001\001\000\002\001" +
    "\001\000\004\012\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\052\010\051\001\001\000\002\001\001\000\004\010\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static int contID=1;
    public static int idstatus=1;
    public static int countAFND=0;
    public static Node raiz;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= obracke FIRSTPART separator STATEMENTS cbracke 
            {
              String RESULT =null;
		
            MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"¡Análisis finalizado!\n"); 
            /*
            MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+MainWindow.er.conjs.toString()+"\n");
            MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+MainWindow.er.compares.toString()+"\n");
            MainWindow.er.setConjs();
            MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+MainWindow.er.ers.toString()+"\n");
            */
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FIRSTPART ::= CONJS ERS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIRSTPART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FIRSTPART ::= ERS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIRSTPART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONJS ::= CONJS CONJ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONJS ::= CONJ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ERS ::= ERS ER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ERS ::= ER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENTS ::= STATEMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONJ ::= R_conj colon id dash greather set_er semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(f.matches(".+~.+")){
                MainWindow.er.conjs.put(c,"["+f.replace("~","-").replaceAll("[ \t\r]","")+"]");
            }else{
                MainWindow.er.conjs.put(c,"["+f.replaceAll("[ \t\r,]","")+"]");
            }
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a+b+c+d+e+f+g);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJ",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ER ::= id dash greather NOTATION semicolon 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first = String.valueOf(idstatus);
            String last = String.valueOf(idstatus);
            String firs;
            String las;
            Node newfinal = new Node(null,null,"#",parser.contID,parser.idstatus,"N",first,last,true,0,0);
            MainWindow.nodes.add(newfinal);
            parser.contID++;
            if(val.getVoidable()=="A"){
                firs = val.getFirst()+last;
            }else{
                firs = val.getFirst();
            }
            las = newfinal.getLast();

            // -------------------- Código para AFND -----------------------------------
            MainWindow.nodes.stsafnd.get(val.getAfnf()).nexts.put(val.getAfnf(),"#");
            //----------------------------------------------------------------------------

            Node newroot = new Node(val,newfinal,".",parser.contID,0,"N",firs,las,false,0,0);
            MainWindow.nodes.add(newroot);
            parser.raiz = newroot;
            String pathtree = "src/main/java/ARBOLES_201944994/";
            ManagerFile.graphTree(newroot, a, pathtree);
            String pathnext = "src/main/java/SIGUIENTES_201944994/";
            ManagerFile.graphCode(a, pathnext, MainWindow.nodes.getCodeNexts());
            String pathtrans = "src/main/java/TRANSICIONES_201944994/";
            ManagerFile.graphCode(a, pathtrans, MainWindow.nodes.getCodeTransitions());
            String pathafd = "src/main/java/AFD_201944994/";
            ManagerFile.graphCode(a, pathafd, MainWindow.nodes.getCodeAFD());
            String pathafnd = "src/main/java/AFND_201944994/";
            ManagerFile.graphCode(a, pathafnd, MainWindow.nodes.getCodeAFND());

            MainWindow.er.ers.put(a, val.getCodER());

            /*
            if(newroot.getHizq()!=null){
                ManagerFile.graphCode(a, pathafnd, newroot.getHizq().getCodeAFND());
            }
            */
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+MainWindow.nodes.stsafnd.toString());
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+val.getCodER()+"\n");
            
            idstatus=1;
            countAFND=0;
            MainWindow.nodes.clearAll();
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a+b+c+val.toString()+d);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= id colon str semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a+b+c+d);
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+c+" es una str_er");
            if(MainWindow.er.existsKeyInCompares(a)){
                MainWindow.er.compares.get(a).add(c.substring(1,c.length()-1));
            }else{
                LinkedList<String> list = new LinkedList<>();
                list.add(c.substring(1,c.length()-1));
                MainWindow.er.compares.put(a,list);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOTATION ::= or NOTATION NOTATION 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String voi;
            if(a.getVoidable()=="A" || b.getVoidable()=="A"){
                voi="A";
            }else{
                voi="N";
            }
            String first = a.getFirst() +","+ b.getFirst();
            String last = a.getLast() +","+ b.getLast();
            
            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(a.getAfni(),"epsilon");
            ai.nexts.put(b.getAfni(),"epsilon");

            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(af.getId(),"epsilon");
            MainWindow.nodes.stsafnd.get(b.getAfnf()).nexts.put(af.getId(),"epsilon");

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------
            
            Node newor = new Node(a,b,"|",parser.contID,0,voi,first,last,false,ai.getId(),af.getId());
            MainWindow.nodes.add(newor);
            parser.contID++;
            RESULT = newor;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"|"+b.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NOTATION ::= concat NOTATION NOTATION 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String voi;
            String first;
            String last;
            if(a.getVoidable()=="A" && b.getVoidable()=="A"){
                voi="A";
            }else{
                voi="N";
            }
            if(a.getVoidable()=="A"){
                first=a.getFirst()+","+b.getFirst();
            }else{
                first=a.getFirst();
            }
            if(b.getVoidable()=="A"){
                last=a.getLast()+","+b.getLast();
            }else{
                last=b.getLast();
            }
            
            // -------------------- Código para AFND -----------------------------------
            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts = MainWindow.nodes.stsafnd.get(b.getAfni()).nexts;
            TreeMap<Integer,String> nexts = new TreeMap<>();
            MainWindow.nodes.stsafnd.get(b.getAfni()).nexts=nexts;
            //----------------------------------------------------------------------------
            
            Node newconcat = new Node(a,b,".",parser.contID,0,voi,first,last,false,a.getAfni(),b.getAfnf());
            MainWindow.nodes.add(newconcat);
            parser.contID++;
            RESULT = newconcat;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"."+b.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NOTATION ::= plus NOTATION 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=a.getFirst();
            String last=a.getLast();

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(a.getAfni(),"epsilon");

            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(af.getId(),"epsilon");
            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(a.getAfni(),"epsilon");

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newsum = new Node(null,a,"+",parser.contID,0,"N",first,last,false,ai.getId(),af.getId());
            MainWindow.nodes.add(newsum);
            parser.contID++;
            RESULT = newsum;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"+");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NOTATION ::= asterisk NOTATION 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=a.getFirst();
            String last=a.getLast();

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(a.getAfni(),"epsilon");
            ai.nexts.put(af.getId(),"epsilon");

            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(af.getId(),"epsilon");
            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(a.getAfni(),"epsilon");

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newmult = new Node(null,a,"*",parser.contID,0,"A",first,last,false,ai.getId(),af.getId());
            MainWindow.nodes.add(newmult);
            parser.contID++;
            RESULT = newmult;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"*");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NOTATION ::= question NOTATION 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=a.getFirst();
            String last=a.getLast();

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(a.getAfni(),"epsilon");
            ai.nexts.put(af.getId(),"epsilon");

            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(af.getId(),"epsilon");

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newquestion = new Node(null,a,"?",parser.contID,0,"A",first,last,false,ai.getId(),af.getId());
            MainWindow.nodes.add(newquestion);
            parser.contID++;
            RESULT = newquestion;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"?");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NOTATION ::= chr_er 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=String.valueOf(idstatus);
            String last=String.valueOf(idstatus);

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(af.getId(),val);

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newseter = new Node(null,null,val,parser.contID,parser.idstatus,"N",first,last,true,ai.getId(),af.getId());
            MainWindow.nodes.add(newseter);
            parser.idstatus++;
            parser.contID++;
            RESULT = newseter;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+val.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NOTATION ::= idset_er 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=String.valueOf(idstatus);
            String last=String.valueOf(idstatus);

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(af.getId(),val);

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newidseter = new Node(null,null,val.replace("{","").replace("}",""),parser.contID,parser.idstatus,"N",first,last,true,ai.getId(),af.getId());
            MainWindow.nodes.add(newidseter);
            parser.idstatus++;
            parser.contID++;
            RESULT = newidseter;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+val.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NOTATION ::= specialset_er 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String first=String.valueOf(idstatus);
            String last=String.valueOf(idstatus);
            
             // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(af.getId(),val);

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newspcset = new Node(null,null,val,parser.contID,parser.idstatus,"N",first,last,true,ai.getId(),af.getId());
            MainWindow.nodes.add(newspcset);
            parser.idstatus++;
            parser.contID++;
            RESULT = newspcset;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+val.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
