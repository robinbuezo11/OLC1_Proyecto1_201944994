package Analyzers;
import Logic.*;
import Gui.*;
import java.util.TreeMap;
import java.util.LinkedList;
import java_cup.runtime.*;

parser code{:
    public static int contID=1;
    public static int idstatus=1;
    public static int countAFND=0;
    public static Node raiz;
:}

terminal String obracke,R_conj,colon,id,idset_er,chr_er,str,specialset_er,dash,greather,set_er,concat,plus,asterisk,or,question,semicolon,separator,cbracke;

non terminal String INIT, FIRSTPART, CONJS, CONJ, ERS, STATEMENTS, STATEMENT;
non terminal Node ER, NOTATION;

precedence left concat, or;
precedence left plus, asterisk, question;
precedence left str;
precedence left chr_er;

start with INIT;

INIT ::= obracke FIRSTPART separator STATEMENTS cbracke {:
            MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"¡Análisis finalizado!\n"); 
            /*
            MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+MainWindow.er.conjs.toString()+"\n");
            MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+MainWindow.er.compares.toString()+"\n");
            MainWindow.er.setConjs();
            MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+MainWindow.er.ers.toString()+"\n");
            */
        :};

FIRSTPART ::= CONJS ERS
            | ERS;

CONJS ::= CONJS CONJ
        | CONJ;

ERS ::= ERS ER
        | ER;

STATEMENTS ::= STATEMENTS STATEMENT
            | STATEMENT;

CONJ ::= R_conj:a colon:b id:c dash:d greather:e set_er:f semicolon:g {:
            if(f.matches(".+~.+")){
                MainWindow.er.conjs.put(c,"["+f.replace("~","-").replaceAll("[ \t\r]","")+"]");
            }else{
                MainWindow.er.conjs.put(c,"["+f.replaceAll("[ \t\r,]","")+"]");
            }
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a+b+c+d+e+f+g);
        :};

ER ::= id:a dash:b greather:c NOTATION:val semicolon:d{:
            String first = String.valueOf(idstatus);
            String last = String.valueOf(idstatus);
            String firs;
            String las;
            Node newfinal = new Node(null,null,"#",parser.contID,parser.idstatus,"N",first,last,true,0,0);
            MainWindow.nodes.add(newfinal);
            parser.contID++;
            if(val.getVoidable()=="A"){
                firs = val.getFirst()+last;
            }else{
                firs = val.getFirst();
            }
            las = newfinal.getLast();

            // -------------------- Código para AFND -----------------------------------
            MainWindow.nodes.stsafnd.get(val.getAfnf()).nexts.put(val.getAfnf(),"#");
            //----------------------------------------------------------------------------

            Node newroot = new Node(val,newfinal,".",parser.contID,0,"N",firs,las,false,0,0);
            MainWindow.nodes.add(newroot);
            parser.raiz = newroot;
            String pathtree = "src/main/java/ARBOLES_201944994/";
            ManagerFile.graphTree(newroot, a, pathtree);
            String pathnext = "src/main/java/SIGUIENTES_201944994/";
            ManagerFile.graphCode(a, pathnext, MainWindow.nodes.getCodeNexts());
            String pathtrans = "src/main/java/TRANSICIONES_201944994/";
            ManagerFile.graphCode(a, pathtrans, MainWindow.nodes.getCodeTransitions());
            String pathafd = "src/main/java/AFD_201944994/";
            ManagerFile.graphCode(a, pathafd, MainWindow.nodes.getCodeAFD());
            String pathafnd = "src/main/java/AFND_201944994/";
            ManagerFile.graphCode(a, pathafnd, MainWindow.nodes.getCodeAFND());

            MainWindow.er.ers.put(a, val.getCodER());

            /*
            if(newroot.getHizq()!=null){
                ManagerFile.graphCode(a, pathafnd, newroot.getHizq().getCodeAFND());
            }
            */
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+MainWindow.nodes.stsafnd.toString());
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+val.getCodER()+"\n");
            
            idstatus=1;
            countAFND=0;
            MainWindow.nodes.clearAll();
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a+b+c+val.toString()+d);
        :};

STATEMENT ::= id:a colon:b str:c semicolon:d{:
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a+b+c+d);
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+c+" es una str_er");
            if(MainWindow.er.existsKeyInCompares(a)){
                MainWindow.er.compares.get(a).add(c.substring(1,c.length()-1));
            }else{
                LinkedList<String> list = new LinkedList<>();
                list.add(c.substring(1,c.length()-1));
                MainWindow.er.compares.put(a,list);
            }
        :};

NOTATION ::= or NOTATION:a NOTATION:b {:
            String voi;
            if(a.getVoidable()=="A" || b.getVoidable()=="A"){
                voi="A";
            }else{
                voi="N";
            }
            String first = a.getFirst() +","+ b.getFirst();
            String last = a.getLast() +","+ b.getLast();
            
            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(a.getAfni(),"epsilon");
            ai.nexts.put(b.getAfni(),"epsilon");

            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(af.getId(),"epsilon");
            MainWindow.nodes.stsafnd.get(b.getAfnf()).nexts.put(af.getId(),"epsilon");

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------
            
            Node newor = new Node(a,b,"|",parser.contID,0,voi,first,last,false,ai.getId(),af.getId());
            MainWindow.nodes.add(newor);
            parser.contID++;
            RESULT = newor;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"|"+b.toString());
        :}
        |concat NOTATION:a NOTATION:b {:
            String voi;
            String first;
            String last;
            if(a.getVoidable()=="A" && b.getVoidable()=="A"){
                voi="A";
            }else{
                voi="N";
            }
            if(a.getVoidable()=="A"){
                first=a.getFirst()+","+b.getFirst();
            }else{
                first=a.getFirst();
            }
            if(b.getVoidable()=="A"){
                last=a.getLast()+","+b.getLast();
            }else{
                last=b.getLast();
            }
            
            // -------------------- Código para AFND -----------------------------------
            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts = MainWindow.nodes.stsafnd.get(b.getAfni()).nexts;
            TreeMap<Integer,String> nexts = new TreeMap<>();
            MainWindow.nodes.stsafnd.get(b.getAfni()).nexts=nexts;
            //----------------------------------------------------------------------------
            
            Node newconcat = new Node(a,b,".",parser.contID,0,voi,first,last,false,a.getAfni(),b.getAfnf());
            MainWindow.nodes.add(newconcat);
            parser.contID++;
            RESULT = newconcat;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"."+b.toString());
        :}
        |plus NOTATION:a{:
            String first=a.getFirst();
            String last=a.getLast();

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(a.getAfni(),"epsilon");

            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(af.getId(),"epsilon");
            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(a.getAfni(),"epsilon");

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newsum = new Node(null,a,"+",parser.contID,0,"N",first,last,false,ai.getId(),af.getId());
            MainWindow.nodes.add(newsum);
            parser.contID++;
            RESULT = newsum;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"+");
        :}
        |asterisk NOTATION:a{:
            String first=a.getFirst();
            String last=a.getLast();

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(a.getAfni(),"epsilon");
            ai.nexts.put(af.getId(),"epsilon");

            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(af.getId(),"epsilon");
            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(a.getAfni(),"epsilon");

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newmult = new Node(null,a,"*",parser.contID,0,"A",first,last,false,ai.getId(),af.getId());
            MainWindow.nodes.add(newmult);
            parser.contID++;
            RESULT = newmult;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"*");
        :}
        |question NOTATION:a{:
            String first=a.getFirst();
            String last=a.getLast();

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(a.getAfni(),"epsilon");
            ai.nexts.put(af.getId(),"epsilon");

            MainWindow.nodes.stsafnd.get(a.getAfnf()).nexts.put(af.getId(),"epsilon");

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newquestion = new Node(null,a,"?",parser.contID,0,"A",first,last,false,ai.getId(),af.getId());
            MainWindow.nodes.add(newquestion);
            parser.contID++;
            RESULT = newquestion;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+a.toString()+"?");
        :}
        |chr_er:val{:
            String first=String.valueOf(idstatus);
            String last=String.valueOf(idstatus);

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(af.getId(),val);

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newseter = new Node(null,null,val,parser.contID,parser.idstatus,"N",first,last,true,ai.getId(),af.getId());
            MainWindow.nodes.add(newseter);
            parser.idstatus++;
            parser.contID++;
            RESULT = newseter;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+val.toString());
        :}
        |idset_er:val{:
            String first=String.valueOf(idstatus);
            String last=String.valueOf(idstatus);

            // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(af.getId(),val);

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newidseter = new Node(null,null,val.replace("{","").replace("}",""),parser.contID,parser.idstatus,"N",first,last,true,ai.getId(),af.getId());
            MainWindow.nodes.add(newidseter);
            parser.idstatus++;
            parser.contID++;
            RESULT = newidseter;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+val.toString());
        :}
        |specialset_er:val{:
            String first=String.valueOf(idstatus);
            String last=String.valueOf(idstatus);
            
             // -------------------- Código para AFND -----------------------------------
            TreeMap<Integer,String> ainexts = new TreeMap<>();
            NodeAFND ai = new NodeAFND(countAFND, ainexts);
            parser.countAFND++;

            TreeMap<Integer,String> afnexts = new TreeMap<>();
            NodeAFND af = new NodeAFND(countAFND, afnexts);
            parser.countAFND++;

            ai.nexts.put(af.getId(),val);

            MainWindow.nodes.stsafnd.add(ai.getId(),ai);
            MainWindow.nodes.stsafnd.add(af.getId(),af);
            //----------------------------------------------------------------------------

            Node newspcset = new Node(null,null,val,parser.contID,parser.idstatus,"N",first,last,true,ai.getId(),af.getId());
            MainWindow.nodes.add(newspcset);
            parser.idstatus++;
            parser.contID++;
            RESULT = newspcset;
            //MainWindow.txtconsole.setText(MainWindow.txtconsole.getText()+"\n"+val.toString());
        :};

