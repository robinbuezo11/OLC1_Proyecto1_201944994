package Analyzers;
import Logic.*;
import java_cup.runtime.*;

parser code{:
    public static int contID=1;
    public static int idstatus=1;
    public static Node raiz;
:}

terminal String obracke,cbracke,id,sub,greather,semicolon,id_setER,setER,specialSetER,sum,concat,question,mult,or;

non terminal String INIT, STATEMENT, FIRSTP;
non terminal Node NOTATIONS, ER;

precedence left sum, mult, question;
precedence left concat, or;

start with INIT;

INIT ::= STATEMENT {:
                
        :};

STATEMENT ::= obracke FIRSTP cbracke;

FIRSTP ::= FIRSTP ER
        | ER;

ER ::= id:a sub greather NOTATIONS:val{:
            String first = idstatus+",";
            String last = idstatus+",";
            String firs;
            String las;
            Node newfinal = new Node(null,null,"#",parser.contID,parser.idstatus,"N",first,last);
            parser.contID++;
            if(val.getVoidable()=="A"){
                firs = val.getFirst()+last;
            }else{
                firs = val.getFirst();
            }
                las = newfinal.getLast();
            Node newroot = new Node(val,newfinal,".",parser.contID,0,"N",firs,las);
            parser.raiz = newroot;
            ManagerFile.graficarArbol(newroot, a);
            idstatus=1;
        :}semicolon;

NOTATIONS ::= or NOTATIONS:a NOTATIONS:b {:
            String voi;
            if(a.getVoidable()=="A" || b.getVoidable()=="A"){
                voi="A";
            }else{
                voi="N";
            }
            String first = a.getFirst() + b.getFirst();
            String last = a.getLast() + b.getLast();
            
            Node newor = new Node(a,b,"|",parser.contID,0,voi,first,last);
            parser.contID++;
            RESULT = newor;
        :}
        |concat NOTATIONS:a NOTATIONS:b {:
            String voi;
            String first;
            String last;
            if(a.getVoidable()=="A" && b.getVoidable()=="A"){
                voi="A";
            }else{
                voi="N";
            }
            if(a.getVoidable()=="A"){
                first=a.getFirst()+b.getFirst();
            }else{
                first=a.getFirst();
            }
            if(b.getVoidable()=="A"){
                last=a.getLast()+b.getLast();
            }else{
                last=b.getLast();
            }
            
            Node newconcat = new Node(a,b,".",parser.contID,0,voi,first,last);
            parser.contID++;
            RESULT = newconcat;
        :}
        |sum NOTATIONS:a{:
            String first=a.getFirst();
            String last=a.getLast();

            Node newsum = new Node(null,a,"+",parser.contID,0,"N",first,last);
            parser.contID++;
            RESULT = newsum;
        :}
        |mult NOTATIONS:a{:
            String first=a.getFirst();
            String last=a.getLast();

            Node newmult = new Node(null,a,"*",parser.contID,0,"A",first,last);
            parser.contID++;
            RESULT = newmult;
        :}
        |question NOTATIONS:a{:
            String first=a.getFirst();
            String last=a.getLast();

            Node newquestion = new Node(null,a,"?",parser.contID,0,"A",first,last);
            parser.contID++;
            RESULT = newquestion;
        :}
        |id_setER:val{:
            String first=idstatus+",";
            String last=idstatus+",";

            Node newidseter = new Node(null,null,val.replace("{","").replace("}",""),parser.contID,parser.idstatus,"N",first,last);
            parser.idstatus++;
            parser.contID++;
            RESULT = newidseter;
        :}
        |specialSetER:val{:
            String first=idstatus+",";
            String last=idstatus+",";

            Node newspcset = new Node(null,null,val,parser.contID,parser.idstatus,"N",first,last);
            parser.idstatus++;
            parser.contID++;
            RESULT = newspcset;
        :}
        |setER:val{:
            String first=idstatus+",";
            String last=idstatus+",";

            Node newseter = new Node(null,null,val,parser.contID,parser.idstatus,"N",first,last);
            parser.idstatus++;
            parser.contID++;
            RESULT = newseter;
        :};